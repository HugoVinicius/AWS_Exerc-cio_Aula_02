/*
 * API Livraria Virtual - Hugo Vinicius
 *
 * API para manutenção da Livraria Vitual
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hugo.desenvolvimento@outlook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace WebApplicationLivraria.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Livro : IEquatable<Livro>
    { 
        /// <summary>
        /// Gets or Sets ISBN
        /// </summary>
        [Required]
        [DataMember(Name="ISBN")]
        public string ISBN { get; set; }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [Required]
        [DataMember(Name="nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or Sets Preco
        /// </summary>
        [Required]
        [DataMember(Name="preco")]
        public decimal? Preco { get; set; }

        /// <summary>
        /// Gets or Sets Autor
        /// </summary>
        [Required]
        [DataMember(Name="autor")]
        public Autor Autor { get; set; }

        /// <summary>
        /// Gets or Sets Editora
        /// </summary>
        [Required]
        [DataMember(Name="editora")]
        public Editora Editora { get; set; }

        /// <summary>
        /// Gets or Sets Categora
        /// </summary>
        [DataMember(Name="categora")]
        public Categoria Categora { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Livro {\n");
            sb.Append("  ISBN: ").Append(ISBN).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Preco: ").Append(Preco).Append("\n");
            sb.Append("  Autor: ").Append(Autor).Append("\n");
            sb.Append("  Editora: ").Append(Editora).Append("\n");
            sb.Append("  Categora: ").Append(Categora).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Livro)obj);
        }

        /// <summary>
        /// Returns true if Livro instances are equal
        /// </summary>
        /// <param name="other">Instance of Livro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Livro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ISBN == other.ISBN ||
                    ISBN != null &&
                    ISBN.Equals(other.ISBN)
                ) && 
                (
                    Nome == other.Nome ||
                    Nome != null &&
                    Nome.Equals(other.Nome)
                ) && 
                (
                    Preco == other.Preco ||
                    Preco != null &&
                    Preco.Equals(other.Preco)
                ) && 
                (
                    Autor == other.Autor ||
                    Autor != null &&
                    Autor.Equals(other.Autor)
                ) && 
                (
                    Editora == other.Editora ||
                    Editora != null &&
                    Editora.Equals(other.Editora)
                ) && 
                (
                    Categora == other.Categora ||
                    Categora != null &&
                    Categora.Equals(other.Categora)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ISBN != null)
                    hashCode = hashCode * 59 + ISBN.GetHashCode();
                    if (Nome != null)
                    hashCode = hashCode * 59 + Nome.GetHashCode();
                    if (Preco != null)
                    hashCode = hashCode * 59 + Preco.GetHashCode();
                    if (Autor != null)
                    hashCode = hashCode * 59 + Autor.GetHashCode();
                    if (Editora != null)
                    hashCode = hashCode * 59 + Editora.GetHashCode();
                    if (Categora != null)
                    hashCode = hashCode * 59 + Categora.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Livro left, Livro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Livro left, Livro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
